{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { KJUR, KEYUTIL } from 'jsrsasign';\nexport default {\n  data: function data() {\n    return {\n      sub: '',\n      acl: '',\n      iat: '',\n      jti: '',\n      nbf: '',\n      applicationId: '',\n      validFor: '',\n      validForTimeUnit: 3600,\n      privateKey: ''\n    };\n  },\n  created: function created() {\n    var tNow = KJUR.jws.IntDate.get('now');\n    var tEnd = tNow + 3600 * 6;\n    this.iat = tNow;\n    this.nbf = tNow;\n    this.jti = this.generateJti();\n  },\n  computed: {\n    invalidAcl: function invalidAcl() {\n      var invalid = false;\n\n      if (this.acl) {\n        try {\n          JSON.parse(this.acl);\n        } catch (e) {\n          invalid = true;\n        }\n      }\n\n      return invalid;\n    },\n    callout: function callout() {\n      var message;\n\n      if (this.privateKey) {\n        if (!this.applicationId) {\n          message = 'Next, provide an Application ID';\n        }\n      } else if (this.applicationId) {\n        message = 'Next, provide a Private Key';\n      } else {\n        message = '<h4>Use your <code>private key</code> and <code>application_id</code> to create a JWT for your Nexmo Application</h4>The JWT is generated on the client-side so your private key <strong>never leaves your browser</strong>.';\n      }\n\n      return message;\n    },\n    exp: function exp() {\n      var validFor = this.validFor || 6;\n      return this.iat + validFor * this.validForTimeUnit;\n    },\n    jwt: function jwt() {\n      var result = '';\n\n      if (this.privateKey && this.applicationId) {\n        try {\n          result = this.generateJwt();\n        } catch (e) {\n          result = '';\n        }\n      }\n\n      return result;\n    },\n    invalidPrivateKey: function invalidPrivateKey() {\n      var invalid = false;\n\n      if (this.privateKey && this.applicationId) {\n        try {\n          this.generateJwt();\n        } catch (e) {\n          invalid = true;\n        }\n      }\n\n      return invalid;\n    },\n    computedClass: function computedClass() {\n      if (this.invalidPrivateKey || this.invalidAcl) return 'Vlt-callout--critical';\n      if (this.applicationId && this.privateKey) return '';\n      if (this.applicationId || this.privateKey) return 'Vlt-callout--warning';\n      if (!this.applicationId && !this.privateKey) return 'Vlt-callout--tip';\n    }\n  },\n  methods: {\n    generateJti: function generateJti() {\n      var text = \"\";\n      var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n      for (var i = 0; i < 12; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n      }\n\n      return text;\n    },\n    buildHeader: function buildHeader() {\n      return JSON.stringify({\n        typ: 'JWT',\n        alg: 'RS256'\n      });\n    },\n    buildPayload: function buildPayload() {\n      var payload = {};\n      payload.iat = this.iat;\n      payload.exp = this.exp;\n      payload.jti = this.jti;\n      payload.application_id = this.applicationId;\n\n      if (this.sub) {\n        payload.sub = this.sub;\n      }\n\n      if (this.acl) {\n        payload.acl = JSON.parse(this.acl);\n      }\n\n      return JSON.stringify(payload);\n    },\n    generateJwt: function generateJwt() {\n      var prvKey = KEYUTIL.getKey(this.privateKey);\n      return KJUR.jws.JWS.sign(\"RS256\", this.buildHeader(), this.buildPayload(), prvKey);\n    }\n  }\n};","map":{"version":3,"sources":["JwtGenerator.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"Vlt-card\">\n    <h1>JWT Generator</h1>\n    <div v-show=\"!jwt\" :class=\"[computedClass, 'Vlt-callout']\">\n      <i></i>\n      <div v-if=\"invalidAcl\" class=\"Vlt-callout__content\">\n        Invalid ACL provided. Must be JSON\n      </div>\n      <div v-else-if=\"invalidPrivateKey\" class=\"Vlt-callout__content\">\n        Invalid private key provided\n      </div>\n      <div v-if=\"!invalidPrivateKey && !invalidAcl\" v-html=\"callout\" class=\"Vlt-callout__content\"/>\n    </div>\n    <div class=\"Vlt-grid\">\n\n      <div class=\"Vlt-col\">\n        <h2>Parameters</h2>\n        <div class=\"Vlt-form__element\">\n          <label class=\"Vlt-label\">Private Key</label>\n          <div class=\"Vlt-textarea\">\n            <textarea rows=\"8\" cols=\"50\" v-model=\"privateKey\" id=\"private-key\"></textarea>\n          </div>\n        </div>\n        <div class=\"Vlt-form__element\">\n          <label class=\"Vlt-label\">Application ID</label>\n          <div class=\"Vlt-input\">\n            <input v-model=\"applicationId\" id=\"application-id\"/>\n          </div>\n        </div>\n        <div class=\"Vlt-form__element\">\n          <label htmlFor=\"example-input-icon-button\" class=\"Vlt-label\">Valid For</label>\n          <div class=\"Vlt-composite\">\n            <div class=\"Vlt-input\">\n              <input type=\"number\" v-model.number=\"validFor\" placeholder=\"6\" />\n            </div>\n\n            <div class=\"Vlt-composite__append\">\n              <div class=\"Vlt-native-dropdown\">\n                <select v-model.number='validForTimeUnit' defaultValue=\"3600\">\n                  <option value=\"1\">Seconds</option>\n                  <option value=\"60\">Minutes</option>\n                  <option value=\"3600\">Hours</option>\n                  <option value=\"86400\">Days</option>\n                </select>\n              </div>\n            </div>\n\n          </div>\n        </div>\n        <div class=\"Vlt-form__element\">\n          <label class=\"Vlt-label\">Sub (optional)</label>\n          <div class=\"Vlt-input\">\n            <input v-model=\"sub\"/>\n          </div>\n        </div>\n        <div class=\"Vlt-form__element\">\n          <label class=\"Vlt-label\">ACL (optional)</label>\n          <div class=\"Vlt-textarea\">\n            <textarea rows=\"4\" cols=\"50\" v-model=\"acl\" id=\"acl\"></textarea>\n          </div>\n        </div>\n      </div>\n      <div class=\"Vlt-col\">\n        <h2>Encoded</h2>\n        <div class=\"Vlt-form__element\">\n          <label class=\"Vlt-label\">Your JWT</label>\n          <div class=\"Vlt-textarea\">\n            <textarea rows=\"29\" cols=\"50\" v-model=\"jwt\" id=\"jwt\"></textarea>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"Vlt-grid\">\n      <div class=\"Vlt-col\">\n        <h2>Decoded</h2>\n        <div class=\"Vlt-table Vlt-table--data\">\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Value</th>\n                <th>Meaning</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr><td><code>application_id</code></td><td>{{applicationId}}</td><td>The application ID this JWT uses for authentication</td></tr>\n              <tr><td><code>iat</code></td><td>{{iat}}</td><td>The time at which the token was issued</td></tr>\n              <tr><td><code>nbf</code></td><td>{{nbf}}</td><td>The time at which the token should become valid</td></tr>\n              <tr><td><code>exp</code></td><td>{{exp}}</td><td>The time at which the token should expire</td></tr>\n              <tr><td><code>sub</code></td><td>{{sub}}</td><td>The subject identified by the JWT (only used for the Client SDKs)</td></tr>\n              <tr><td><code>acl</code></td><td>{{acl}}</td><td>A list of permissions that this token will have</td></tr>\n              <tr><td><code>jti</code></td><td>{{jti}}</td><td>A unique identifier for the JWT</td></tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { KJUR, KEYUTIL} from 'jsrsasign';\n\nexport default {\n  data: function() {\n    return {\n      sub: '',\n      acl: '',\n      iat: '',\n      jti: '',\n      nbf: '',\n      applicationId: '',\n      validFor: '',\n      validForTimeUnit:  3600,\n      privateKey: '',\n    }\n  },\n  created: function() {\n    let tNow = KJUR.jws.IntDate.get('now');\n    let tEnd = tNow + (3600*6);\n\n    this.iat = tNow;\n    this.nbf = tNow;\n    this.jti = this.generateJti();\n  },\n  computed: {\n    invalidAcl: function() {\n      let invalid = false;\n\n      if (this.acl) {\n        try {\n          JSON.parse(this.acl);\n        } catch (e) {\n          invalid = true;\n        }\n      }\n      return invalid;\n    },\n    callout: function() {\n      let message;\n\n      if (this.privateKey) {\n        if (!this.applicationId) {\n          message = 'Next, provide an Application ID';\n        }\n      } else if (this.applicationId) {\n        message = 'Next, provide a Private Key';\n      } else {\n        message = '<h4>Use your <code>private key</code> and <code>application_id</code> to create a JWT for your Nexmo Application</h4>The JWT is generated on the client-side so your private key <strong>never leaves your browser</strong>.';\n      }\n      return message;\n    },\n    exp: function() {\n      let validFor = this.validFor || 6;\n      return this.iat + (validFor * this.validForTimeUnit);\n    },\n    jwt: function() {\n      let result = '';\n      if (this.privateKey && this.applicationId) {\n        try {\n          result = this.generateJwt();\n        } catch (e) {\n          result = '';\n        }\n      }\n      return result;\n    },\n    invalidPrivateKey: function() {\n      let invalid = false;\n      if (this.privateKey && this.applicationId) {\n        try {\n          this.generateJwt();\n        } catch (e) {\n          invalid = true;\n        }\n      }\n      return invalid;\n    },\n    computedClass: function() {\n      if (this.invalidPrivateKey || this.invalidAcl)\n        return 'Vlt-callout--critical';\n      if (this.applicationId && this.privateKey)\n        return '';\n      if (this.applicationId || this.privateKey)\n        return 'Vlt-callout--warning';\n      if (!this.applicationId && !this.privateKey)\n        return 'Vlt-callout--tip';\n    }\n  },\n  methods: {\n    generateJti: function() {\n      let text = \"\";\n      let possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n      for (let i = 0; i < 12; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n      }\n\n      return text;\n    },\n    buildHeader: function() {\n      return JSON.stringify({ typ: 'JWT', alg: 'RS256' });\n    },\n    buildPayload: function() {\n      let payload = {};\n      payload.iat = this.iat;\n      payload.exp = this.exp;\n      payload.jti = this.jti;\n      payload.application_id = this.applicationId;\n      if (this.sub) { payload.sub = this.sub; }\n      if (this.acl) { payload.acl = JSON.parse(this.acl); }\n      return JSON.stringify(payload);\n    },\n    generateJwt: function() {\n      let prvKey = KEYUTIL.getKey(this.privateKey);\n      return KJUR.jws.JWS.sign(\"RS256\", this.buildHeader(), this.buildPayload(), prvKey);\n    }\n  }\n}\n</script>\n"],"sourceRoot":"app/javascript/components/jwt_generator"},"metadata":{},"sourceType":"module"}