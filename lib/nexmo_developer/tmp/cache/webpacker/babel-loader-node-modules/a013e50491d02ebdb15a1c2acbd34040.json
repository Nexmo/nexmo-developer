{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport difference from 'lodash/difference';\nvar GSM_STANDARD_CHARS = ['@', '0', '¡', 'P', '¿', 'p', '£', '_', '!', '1', 'A', 'Q', 'a', 'q', '$', '\"', '2', 'B', 'R', 'b', 'r', '¥', '?', '#', '3', 'C', 'S', 'c', 's', 'è', '?', '4', 'D', 'T', 'd', 't', 'é', '?', '%', '5', 'E', 'U', 'e', 'u', 'ù', '6', 'F', 'V', 'f', 'v', 'ì', '?', \"'\", '7', 'G', 'W', 'g', 'w', 'ò', '(', '8', 'H', 'X', 'h', 'x', 'Ç', ')', '9', 'I', 'Y', 'i', 'y', '*', ':', 'J', 'Z', 'j', 'z', 'Ø', '+', ';', 'K', 'Ä', 'k', 'ä', 'Æ', ',', '<', 'L', 'l', 'ö', 'æ', '-', '=', 'M', 'Ñ', 'm', 'ñ', 'Å', 'ß', '.', '>', 'N', 'Ü', 'n', 'ü', 'å', 'É', '/', 'O', '§', 'o', 'à', ' ', '\\r', '\\n'];\nvar GSM_EXTENDED_CHARS = ['|', '^', '€', '{', '}', '[', ']', '~', '\\\\'];\nvar BYTE_SIZE = 8;\nvar CHARACTER_SIZE = 7;\nvar GSM_METADATA_LENGTH = 7;\nvar GSM_METADATA_SIZE = GSM_METADATA_LENGTH * CHARACTER_SIZE;\nvar GSM_MAX_SIZE = 140 * BYTE_SIZE;\n\nvar CharacterCounter =\n/*#__PURE__*/\nfunction () {\n  function CharacterCounter(text) {\n    _classCallCheck(this, CharacterCounter);\n\n    this.text = text;\n  }\n\n  _createClass(CharacterCounter, [{\n    key: \"getInfo\",\n    value: function getInfo() {\n      var messages = this.getMessages();\n      return {\n        messages: messages,\n        unicodeRequired: this.isUnicodeRequired(),\n        charactersCount: messages.reduce(function (sum, sms) {\n          return sum + sms.length;\n        }, 0)\n      };\n    }\n  }, {\n    key: \"isUnicodeRequired\",\n    value: function isUnicodeRequired() {\n      var remainder = difference(_toConsumableArray(this.text), [].concat(GSM_STANDARD_CHARS, GSM_EXTENDED_CHARS));\n      return remainder.length !== 0;\n    }\n  }, {\n    key: \"getMessages\",\n    value: function getMessages() {\n      return this.splitIntoSMS(GSM_MAX_SIZE);\n    }\n  }, {\n    key: \"splitIntoSMS\",\n    value: function splitIntoSMS(maxSize) {\n      var index = 0;\n      var messages = [];\n      var text = this.text;\n\n      while (index <= this.text.length) {\n        var sms = this.getSMS(text, maxSize);\n        messages.push(sms);\n        text = text.slice(sms.length);\n        index += sms.length + 1;\n      }\n\n      return messages;\n    }\n  }, {\n    key: \"getSMS\",\n    value: function getSMS(text, maxSize) {\n      var index = 0,\n          currentSize = 0;\n      var maxSizeWithMeta = maxSize - GSM_METADATA_SIZE;\n\n      while (currentSize + this.getCharSize(text[index]) <= maxSizeWithMeta && index < text.length) {\n        currentSize += this.getCharSize(text[index]);\n        index += 1;\n      }\n\n      if (this.getTextSize(text.slice(index)) + currentSize <= maxSize && text.length - index <= GSM_METADATA_LENGTH) {\n        index = text.length;\n      }\n\n      return text.slice(0, index);\n    }\n  }, {\n    key: \"getTextSize\",\n    value: function getTextSize(text) {\n      return _toConsumableArray(text).map(this.getCharSize, this).reduce(function (sum, c) {\n        return sum + c;\n      }, 0);\n    }\n  }, {\n    key: \"getSizeInBytes\",\n    value: function getSizeInBytes() {\n      return Math.ceil(this.getTextSize(this.text) / BYTE_SIZE);\n    }\n  }, {\n    key: \"getCharSize\",\n    value: function getCharSize(character) {\n      if (!character) {\n        return 0;\n      }\n\n      if (this.isUnicodeRequired()) {\n        return character.length * BYTE_SIZE * 2;\n      } else if (GSM_EXTENDED_CHARS.includes(character)) {\n        return CHARACTER_SIZE * 2;\n      } else {\n        return CHARACTER_SIZE;\n      }\n    }\n  }]);\n\n  return CharacterCounter;\n}();\n\nexport default CharacterCounter;","map":{"version":3,"sources":["/Users/bgreenberg2/Documents/dev/nexmo-developer/lib/nexmo_developer/app/javascript/components/concatenation/character_counter.js"],"names":["difference","GSM_STANDARD_CHARS","GSM_EXTENDED_CHARS","BYTE_SIZE","CHARACTER_SIZE","GSM_METADATA_LENGTH","GSM_METADATA_SIZE","GSM_MAX_SIZE","CharacterCounter","text","messages","getMessages","unicodeRequired","isUnicodeRequired","charactersCount","reduce","sum","sms","length","remainder","splitIntoSMS","maxSize","index","getSMS","push","slice","currentSize","maxSizeWithMeta","getCharSize","getTextSize","map","c","Math","ceil","character","includes"],"mappings":"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","sourcesContent":["import difference from 'lodash/difference'\n\nconst GSM_STANDARD_CHARS = [\n  '@', '0', '¡', 'P', '¿',\n  'p', '£', '_', '!', '1',\n  'A', 'Q', 'a', 'q', '$',\n  '\"', '2', 'B', 'R', 'b',\n  'r', '¥', '?', '#', '3',\n  'C', 'S', 'c', 's', 'è',\n  '?', '4', 'D', 'T', 'd',\n  't', 'é', '?', '%', '5',\n  'E', 'U', 'e', 'u', 'ù',\n  '6', 'F', 'V', 'f', 'v',\n  'ì', '?', \"'\", '7', 'G',\n  'W', 'g', 'w', 'ò', '(',\n  '8', 'H', 'X', 'h', 'x',\n  'Ç', ')', '9', 'I', 'Y',\n  'i', 'y', '*', ':', 'J',\n  'Z', 'j', 'z', 'Ø', '+',\n  ';', 'K', 'Ä', 'k', 'ä',\n  'Æ', ',', '<', 'L', 'l',\n  'ö', 'æ', '-', '=', 'M',\n  'Ñ', 'm', 'ñ', 'Å', 'ß',\n  '.', '>', 'N', 'Ü', 'n',\n  'ü', 'å', 'É', '/', 'O',\n  '§', 'o', 'à', ' ', '\\r',\n  '\\n'\n]\n\nconst GSM_EXTENDED_CHARS = [\n  '|', '^', '€', '{', '}', '[', ']', '~', '\\\\'\n]\n\nconst BYTE_SIZE = 8;\nconst CHARACTER_SIZE = 7;\nconst GSM_METADATA_LENGTH = 7;\nconst GSM_METADATA_SIZE = GSM_METADATA_LENGTH * CHARACTER_SIZE;\nconst GSM_MAX_SIZE = 140 * BYTE_SIZE;\n\nclass CharacterCounter {\n  constructor(text) {\n    this.text = text;\n  }\n\n  getInfo() {\n    let messages = this.getMessages();\n    return {\n      messages: messages,\n      unicodeRequired: this.isUnicodeRequired(),\n      charactersCount: messages.reduce(function(sum, sms) { return sum + sms.length }, 0)\n    }\n  }\n\n  isUnicodeRequired() {\n    let remainder = difference([...this.text], [...GSM_STANDARD_CHARS, ...GSM_EXTENDED_CHARS]);\n    return remainder.length !== 0;\n  }\n\n  getMessages() {\n    return this.splitIntoSMS(GSM_MAX_SIZE);\n  }\n\n  splitIntoSMS(maxSize) {\n    let index = 0;\n    let messages = [];\n    let text = this.text;\n    while(index <= this.text.length) {\n      let sms  = this.getSMS(text, maxSize);\n      messages.push(sms);\n      text = text.slice(sms.length);\n      index += sms.length + 1;\n    }\n    return messages;\n  }\n\n  getSMS(text, maxSize) {\n    let index = 0, currentSize = 0;\n    const maxSizeWithMeta = maxSize - GSM_METADATA_SIZE;\n\n    while (currentSize + this.getCharSize(text[index]) <= maxSizeWithMeta && index < text.length) {\n      currentSize += this.getCharSize(text[index]);\n      index += 1;\n    }\n    if (this.getTextSize(text.slice(index)) + currentSize <= maxSize && text.length - index <= GSM_METADATA_LENGTH) {\n      index = text.length;\n    }\n    return text.slice(0, index);\n  }\n\n  getTextSize(text) {\n    return [...text].map(this.getCharSize, this).reduce(function(sum, c) { return sum + c }, 0);\n  }\n\n  getSizeInBytes() {\n    return Math.ceil(this.getTextSize(this.text) / BYTE_SIZE);\n  }\n\n  getCharSize(character) {\n    if(!character) { return 0; }\n    if (this.isUnicodeRequired()) {\n      return character.length * BYTE_SIZE * 2;\n    } else if (GSM_EXTENDED_CHARS.includes(character)) {\n      return CHARACTER_SIZE * 2;\n    } else {\n      return CHARACTER_SIZE;\n    }\n  }\n}\n\nexport default CharacterCounter;\n"]},"metadata":{},"sourceType":"module"}