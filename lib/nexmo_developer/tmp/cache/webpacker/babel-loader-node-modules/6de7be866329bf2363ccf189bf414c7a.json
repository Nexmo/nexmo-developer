{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  props: ['codeLanguage', 'codeLanguageSelectedWhilstOnPage', 'codeLanguageSetByUrl', 'currentUser', 'feedbackAuthor', 'githubUrl', 'recaptcha', 'source'],\n  data: function data() {\n    return {\n      comment: '',\n      error: false,\n      feedbackComplete: undefined,\n      id: undefined,\n      recaptchaToken: undefined,\n      sentiment: undefined,\n      showExtendedFields: false,\n      submittingFeedback: undefined,\n      uploadingSentiment: false,\n      programmingLanguage: this.codeLanguage,\n      progammingLanguageSelectedWhilstOnPage: undefined,\n      progammingLanguageSetByUrl: undefined\n    };\n  },\n  mounted: function mounted() {\n    document.addEventListener('codeLanguageChange', this.handleCodeLanguageChange.bind(this));\n  },\n  beforeDestroy: function beforeDestroy() {\n    document.removeEventListener('codeLanguageChange', this.handleCodeLanguageChange.bind(this));\n  },\n  computed: {\n    email: function email() {\n      return this.feedbackAuthor && this.feedbackAuthor.email || this.currentUser && this.currentUser.email;\n    },\n    isSubmitDisabled: function isSubmitDisabled() {\n      return this.submittingFeedback || this.comment === '';\n    }\n  },\n  methods: {\n    setSentiment: function setSentiment(sentiment) {\n      this.sentiment = sentiment;\n      this.showExtendedFields = sentiment == 'negative';\n      this.uploadingSentiment = true;\n      this.error = undefined;\n      this.createOrUpdate();\n    },\n    parameters: function parameters() {\n      return {\n        'g-recaptcha-response': this.recaptchaToken,\n        feedback_feedback: {\n          id: this.id,\n          sentiment: this.sentiment,\n          comment: this.comment,\n          email: this.email,\n          code_language: this.programmingLanguage,\n          code_language_selected_whilst_on_page: this.programmingLanguageSelectedWhilstOnPage,\n          code_language_set_by_url: this.programmingLanguageSetByUrl,\n          source: this.source\n        }\n      };\n    },\n    invisibleCaptchaCallback: function invisibleCaptchaCallback(recaptchaToken) {\n      this.recaptchaToken = recaptchaToken;\n      this.createOrUpdate();\n    },\n    createOrUpdate: function createOrUpdate() {\n      var _this = this;\n\n      if (this.recaptcha && this.recaptcha.enabled && !this.recaptcha.skip && this.recaptchaToken == undefined) {\n        var element = document.createElement('div');\n        document.getElementById('recaptcha-container').append(element);\n        var id = grecaptcha.render(element, {\n          sitekey: this.recaptcha.sitekey,\n          callback: this.invisibleCaptchaCallback.bind(this),\n          size: 'invisible',\n          badge: 'inline'\n        });\n        return grecaptcha.execute(id);\n      }\n\n      fetch('/feedback/feedbacks', {\n        method: 'POST',\n        credentials: 'same-origin',\n        body: JSON.stringify(this.parameters()),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(function (response) {\n        if (response.ok) {\n          return response.json();\n        }\n\n        return Promise.reject({\n          message: 'Bad response from server',\n          response: response\n        });\n      }).then(function (payload) {\n        _this.feedbackComplete = _this.submittingFeedback;\n        _this.uploadingSentiment = false;\n        _this.submittingFeedback = false;\n        _this.id = payload.id;\n      })[\"catch\"](function (error) {\n        console.log(error);\n        _this.uploadingSentiment = false;\n        _this.submittingFeedback = false;\n\n        if (error.response) {\n          error.response.json().then(function (payload) {\n            _this.error = payload.error;\n          })[\"catch\"](function () {\n            _this.error = \"Something went wrong! Try again later\";\n          });\n        } else {\n          _this.error = \"Something went wrong! Try again later\";\n        }\n      });\n    },\n    submitFeedback: function submitFeedback() {\n      this.submittingFeedback = true;\n      this.createOrUpdate();\n    },\n    handleCodeLanguageChange: function handleCodeLanguageChange(event) {\n      this.programmingLanguage = event.detail.language;\n      this.programmingSelectedWhilstOnPage = true;\n      this.programmingSetByUrl = false;\n    }\n  }\n};","map":{"version":3,"sources":["Feedback.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"Vlt-box Vlt-box--left feedback\">\n    <div class=\"Vlt-grid\">\n      <div class=\"Vlt-col Vlt-col--3of4\">\n        <h5>Was this documentation helpful?</h5>\n\n        <div class=\"sentiments\">\n          <div v-if=\"uploadingSentiment\">\n            <div class=\"Vlt-spinner Vlt-spinner--small\"></div>\n          </div>\n          <div>\n            <span v-on:click=\"setSentiment('positive')\" v-bind:class=\"[{ 'Vlt-btn_active': sentiment == 'positive' }, 'Vlt-btn Vlt-btn--large Vlt-btn--tertiary Vlt-btn--icon']\">\n              <svg class=\"Vlt-green\"><use xlink:href=\"/symbol/volta-icons.svg#Vlt-icon-happy\"/></svg>\n            </span>\n            <span v-on:click=\"setSentiment('negative')\" v-bind:class=\"[{ 'Vlt-btn_active': sentiment == 'negative' }, 'Vlt-btn Vlt-btn--large Vlt-btn--tertiary Vlt-btn--icon']\">\n              <svg class=\"Vlt-red\"><use xlink:href=\"/symbol/volta-icons.svg#Vlt-icon-unhappy\"/></svg>\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"Vlt-col Vlt-col--right Vlt-col--1of4\">\n        <span v-if=\"githubUrl\" id=\"feedback__improve\">\n          <svg class=\"Vlt-icon Vlt-black\">\n            <use xlink:href=\"/symbol/volta-icons.svg#Vlt-icon-github\" />\n          </svg>\n          <a v-bind:href=\"githubUrl\" target=\"_blank\"> Improve this page</a>\n        </span>\n      </div>\n    </div>\n\n    <p v-if=\"error\" class=\"form__error\">{{error}}</p>\n\n    <div v-if=\"sentiment && !showExtendedFields || feedbackComplete\">\n      <hr/>\n      <p>Great! Thanks for the feedback.</p>\n    </div>\n\n    <div v-if=\"showExtendedFields && id && !feedbackComplete\">\n      <hr/>\n      <p>We see that this page didn’t meet your expectations. We’re really sorry!<br/></p>\n      <div class=\"Vlt-form__element\">\n        <p><strong>We’d like a chance to fix that. Please would you give us some more information?</strong></p>\n        <label class=\"Vlt-label\">What didn’t work for me: <small class=\"Vlt-grey-darker\">(required)</small></label>\n        <div class=\"Vlt-textarea\">\n          <textarea v-model=\"comment\"/>\n        </div>\n      </div>\n\n      <div v-if=\"!currentUser\" class=\"Vlt-form__element Vlt-form__element--elastic\">\n        <p><strong>Can we let you know when we've solved your issue?</strong></p>\n        <label class=\"Vlt-label\">My email: <small class=\"Vlt-grey-darker\">(optional)</small></label>\n        <div class=\"Vlt-input\">\n          <input type=\"email\" size=\"20\" value=\"email\" id=\"email\"/>\n        </div>\n      </div>\n\n      <input v-on:click=\"submitFeedback\" v-bind:disabled=\"isSubmitDisabled\" type=\"submit\" class=\"Vlt-btn Vlt-btn--primary Vlt-btn--app\" value=\"Send Feedback\" />\n      <p>Your data will be treated in accordance with our <a href=\"https://www.nexmo.com/privacy-policy\">Privacy Policy</a>, which sets out the rights you have in respect of your data.</p>\n    </div>\n\n    <p v-if=\"currentUser\">\n      <br/>\n      Logged in as {{ currentUser.email }}.\n      <a v-bind:href=\"currentUser.signout_path\">Sign out</a>\n    </p>\n\n  </div>\n</template>\n<script>\n  export default {\n    props: ['codeLanguage', 'codeLanguageSelectedWhilstOnPage', 'codeLanguageSetByUrl', 'currentUser', 'feedbackAuthor', 'githubUrl', 'recaptcha', 'source'],\n    data: function() {\n      return {\n        comment: '',\n        error: false,\n        feedbackComplete: undefined,\n        id: undefined,\n        recaptchaToken: undefined,\n        sentiment: undefined,\n        showExtendedFields: false,\n        submittingFeedback: undefined,\n        uploadingSentiment: false,\n        programmingLanguage: this.codeLanguage,\n        progammingLanguageSelectedWhilstOnPage: undefined,\n        progammingLanguageSetByUrl: undefined\n      };\n    },\n    mounted: function() {\n      document.addEventListener('codeLanguageChange', this.handleCodeLanguageChange.bind(this));\n    },\n    beforeDestroy: function() {\n      document.removeEventListener('codeLanguageChange', this.handleCodeLanguageChange.bind(this));\n    },\n    computed: {\n      email: function() {\n        return this.feedbackAuthor && this.feedbackAuthor.email ||\n          this.currentUser && this.currentUser.email;\n      },\n      isSubmitDisabled: function() {\n        return this.submittingFeedback || this.comment === '';\n      }\n    },\n    methods: {\n      setSentiment: function(sentiment) {\n        this.sentiment = sentiment;\n        this.showExtendedFields = sentiment == 'negative';\n        this.uploadingSentiment = true;\n        this.error = undefined;\n        this.createOrUpdate();\n      },\n      parameters: function() {\n        return {\n          'g-recaptcha-response': this.recaptchaToken,\n          feedback_feedback: {\n            id: this.id,\n            sentiment: this.sentiment,\n            comment: this.comment,\n            email: this.email,\n            code_language: this.programmingLanguage,\n            code_language_selected_whilst_on_page: this.programmingLanguageSelectedWhilstOnPage,\n            code_language_set_by_url: this.programmingLanguageSetByUrl,\n            source: this.source,\n          }\n        };\n      },\n      invisibleCaptchaCallback: function(recaptchaToken) {\n        this.recaptchaToken = recaptchaToken;\n        this.createOrUpdate();\n      },\n      createOrUpdate: function() {\n        if (this.recaptcha && this.recaptcha.enabled && !this.recaptcha.skip && this.recaptchaToken == undefined) {\n          const element = document.createElement('div');\n          document.getElementById('recaptcha-container').append(element);\n\n          const id = grecaptcha.render(element, {\n            sitekey: this.recaptcha.sitekey,\n            callback: this.invisibleCaptchaCallback.bind(this),\n            size: 'invisible',\n            badge: 'inline',\n          })\n          return grecaptcha.execute(id);\n        }\n\n        fetch('/feedback/feedbacks', {\n          method: 'POST',\n          credentials: 'same-origin',\n          body: JSON.stringify(this.parameters()),\n          headers: { 'Content-Type': 'application/json' }\n        })\n        .then((response) => {\n          if (response.ok) { return response.json() }\n          return Promise.reject({ message: 'Bad response from server', response })\n        })\n        .then((payload) => {\n          this.feedbackComplete = this.submittingFeedback;\n          this.uploadingSentiment = false;\n          this.submittingFeedback = false;\n          this.id = payload.id;\n        })\n        .catch((error) => {\n          console.log(error)\n\n          this.uploadingSentiment = false;\n          this.submittingFeedback = false;\n\n          if (error.response) {\n            error.response.json()\n              .then((payload) => {\n                this.error = payload.error;\n              })\n              .catch(() => {\n                this.error = \"Something went wrong! Try again later\";\n              })\n          } else {\n            this.error = \"Something went wrong! Try again later\";\n          }\n        })\n      },\n      submitFeedback: function() {\n        this.submittingFeedback = true;\n        this.createOrUpdate();\n      },\n      handleCodeLanguageChange: function(event) {\n        this.programmingLanguage = event.detail.language;\n        this.programmingSelectedWhilstOnPage = true;\n        this.programmingSetByUrl = false;\n      }\n    }\n  }\n</script>\n<style scoped>\n</style>\n"],"sourceRoot":"app/javascript/components/feedback"},"metadata":{},"sourceType":"module"}