require 'socket'
require 'uri'
require 'json'

#Dynamically create the NCCO to run a conversation from your virtual number

def generate_ncco(request_line)
#Parse the parameters and check if the message was delivered
  params = URI::decode_www_form(request_line).to_h

  #Retrieve with the parameters in this request
  to = params['to']         #The endpoint being called
  from = params['from']     #The endpoint you are calling from
  uuid = params['uuid']     #The unique ID for this Conversation

  #For more advanced Conversations you use the parameters to personalize the NCCO
  #Dynamically create the NCCO to run a conversation from your virtual number

  #Create NCCO Object for your conversation

  if from == "441632960960"
    ncco=[
            {
              "action": "conversation",
              "name": "nexmo-conference-moderated",
              "endOnExit": "true",
              "record": "true"
            }
           ]
  else
    ncco=[
      {
        "action": "talk",
        "text": "Welcome to a Nexmo moderated conference",
        "voiceName": "Amy"
      },
      {
        "action": "conversation",
        "name": "nexmo-conference-moderated",
        "startOnEnter": "false",
        "musicOnHoldUrl": ["https://nexmo-community.github.io/ncco-examples/assets/voice_api_audio_streaming.mp3"]
      }
    ]
  end
  return ncco.to_json
end

# Initialize a TCPServer
server = TCPServer.new('', 9999)
# Wait for connections
loop do
  # Wait until a client connects
  socket = server.accept
  method, path = socket.gets.split
  resp = generate_ncco(path)
  # Return the 200 OK
  headers = ["HTTP/1.1 200 OK",
             "Content-Type: text/html; charset=iso-8859-1",
             "Content-Length: #{resp.length}\r\n\r\n"].join("\r\n")
  socket.puts headers
  #Return the NCCO
  socket.puts resp
  # Close the socket, terminating the connection
  socket.close
end
