#To run this code, replace the MyHandler in
#https://wiki.python.org/moin/BaseHttpServer With the following code,
import time
import BaseHTTPServer
import re
import json

class MyHandler(BaseHTTPServer.BaseHTTPRequestHandler):
    def do_GET(s):
        #Parse parameters in the GET request
        parsed_path = urlparse(s.path)
        try:
                params = dict(
                [p.split('=') for p in parsed_path[4].split('&')])
        except:
                params = {}

        #Retrieve with the parameters in this request
        call_to = params['to']      #The endpoint being called
        call_form = params['from']  #The endpoint you are calling from
        call_uuid = params['conversation_uuid']     #The unique ID for this Conversation

        #Dynamically create the NCCO to connect the inbound call from a mapped virtual number to
        #a phone number
        if call_to == "441632960960":
            ncco=[
                {
                    "action": "connect",
                    "eventUrl": ["https://example.com/events"],
                    "from": "441632960960",
                    "endpoint": [
                      {
                        "type": "phone",
                        "number": "441632960961"
                      }
                    ]
                }
            ]
        else:
            ncco=[
                {
                    "action": "connect",
                    "eventUrl": ["https://example.com/events"],
                    "from": "441632960963",
                    "endpoint": [
                      {
                        "type": "phone",
                        "number": "441632960965"
                      }
                    ]
                }
            ]

        #For more advanced Conversations you use the parameters to personalize the NCCO
        #Dynamically create the NCCO to run a conversation from your virtual number

        print "GET Request from " + s.path
        s.send_response(200)
        s.send_header("Content-type", "application/json")
        s.end_headers()
        s.wfile.write(json.dumps(ncco))
